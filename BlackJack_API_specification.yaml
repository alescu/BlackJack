openapi: 3.0.0
info:
  title: BlackJack
  version: 1.0.0
  description: >-
    StartFragmentThis online **Blackjack** game offers players a classic casino
    experience. You compete against the dealer, aiming for a hand total of
    **21** or as close as possible without exceeding it. Players can **hit** for
    more cards or **stand** to keep their current hand. The game features
    realistic graphics and intuitive controls for an engaging session of
    strategic card play.EndFragment
servers:
  - url: localhost
paths:
  /player:
    parameters: []
    post:
      summary: new Player
      description: To create a new player, simply provide a player name and the system will automatically assign a starting balance of 100 credits. This ensures every new player has a solid foundation to begin playing immediately. You'll then receive confirmation of your newly created player, ready to hit the tables!
      parameters:
        - name: player
          in: header
          required: true
          example: '{
                        "playerName": "albert1",
                        "account": 100.0
                    }'
          schema:
                $ref: '#/components/schemas/NewPlayer'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '500':
          description: Error operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                playerName:
                  type: string
                account:
                  type: number                 
    get:
      summary: List all Players
      description: This endpoint provides a simple way to retrieve the current count of all active players in the blackjack game. A successful request will return an integer representing the total number of players, making it easy to monitor game activity.
      parameters: []
      responses:
        '200':
          description: Successful operation
      
  /player/{id}:
    parameters: []
    get:
      summary: get Player by id
      description: This endpoint allows you to retrieve a specific player's details by providing their unique identifier. Simply pass the player's id as a path variable, and if found, the system will return the player's information.  This is ideal for looking up individual player statistics or managing specific accounts.
      parameters:
        - name: id
          in: path
          description: Id of Player
          required: true
          schema:
            type: number
            format: int64
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '500':
          description: Error operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
      
  /player/addAccount/{id}:
    parameters: []
    post:
      summary: update Player Account
      description: This endpoint enables you to increase a player's balance by a specified amount. You'll need to provide the player's id and the amount to add in the request body. This is crucial for handling deposits, awarding bonuses, or adjusting player funds within the game.
      parameters:
        - name: id
          in: path
          description: Id of Player
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful operation
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              
  /player/getPlayersByProfit:
    parameters: []
    get:
      summary: get Players By Profit
      description: This endpoint allows you to retrieve a list of all players, ordered by their total winnings. It's perfect for displaying leaderboards or identifying top-performing players. The results will be sorted in descending order, showing the players with the highest earnings first.
      parameters: []
      responses:
        '200':
          description: Successful operation
      
  /game/{id}:
    parameters: []
    post:
      summary: New Game
      description: This unique endpoint serves a dual purpose: it initializes a new blackjack game for a player and, if that player doesn't already exist, it will automatically create a new player record for them. This streamlines the onboarding process, allowing new users to jump straight into a game without a separate registration step. You'll provide the player's details in the request, and the system will handle either game initialization or player creation and game initialization, returning the details of the new game session.
      parameters:
        - name: id
          in: path
          description: Id of Game
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
      
  /game/{id}/play:
    parameters: []
    post:
      summary: New Game Movement in game
      description: This endpoint is where the core of the blackjack game happens, allowing a player to make their move during a game. To use it, the player must specify their bet amount and their chosen play type: use 'H' for Hit (to request another card) or 'S' for Stand (to stop taking cards). Once a player chooses to Stand (or if they go over 21), the dealer will then play their hand automatically. The dealer will continue to hit until their total is 17 or higher, or they go over 21, determining the outcome of the round. This endpoint handles the entire game logic for a player's turn
      parameters:
        - name: id
          in: path
          description: Id of Gamer
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gameId:
                  type: string
                playerId:
                  type: number
                  format: int64
                moveType:
                  type: string
                bet:
                  type: number
                  format: int64
    get:
      summary: Get Game By Id
      description: This endpoint allows you to retrieve the details of a specific game by providing its unique identifier. By passing the id of a particular game, you can access all the information related to that specific play, including the player's choices, the cards dealt, and the outcome of that round. This is useful for reviewing game history or debugging.
      parameters:
        - name: id
          in: path
          description: Id of Gamer
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
      
    delete:
      summary: Delete game by Id
      description: This endpoint allows you to delete an entire game session using its unique identifier. By providing the id of a game, you can effectively remove it from the system. This is typically used for administrative purposes, such as clearing out old game data or resetting a specific game instance.
      parameters:
        - name: id
          in: path
          description: Id of Gamer
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful operation
          
components:
  schemas:
    NewPlayer:
      type: object
      properties:  
        playerName:
          type: string
          description: Player name
          example: approved
        account:
          type: number
          format: int64
          example: 1 
    Player:
      type: object
      properties:
        id:
          type: number
          format: int64
          example: 1    
        playerName:
          type: string
          description: Player name
          example: approved
        account:
          type: number
          format: int64
          example: 1 
        profitBalance:
          type: number
          format: int64
          example: 1 
        gamesStarted:
          type: integer
          format: int64
          example: 1 
        gamesWon:
          type: integer
          format: int64
          example: 1 
        gamesLost:
          type: integer
          format: int64
          example: 1  
        gamesDraw:
          type: integer
          format: int64
          example: 1  
    Game:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the game session.
          example: "683796c7a8788a59919b196e"
        playerId:
          type: integer
          format: int32
          description: The ID of the player participating in this game.
          example: 4
        cardsReceived:
          type: array
          description: List of cards currently in the player's hand.
          items:
            $ref: '#/components/schemas/Card'
        dealerCards:
          type: array
          nullable: true
          description: List of cards currently in the dealer's hand. Null until the dealer's turn.
          items:
            $ref: '#/components/schemas/Card'
        resultMessage:
          type: string
          nullable: true
          description: A message describing the outcome of the game (e.g., "Player wins", "Dealer wins", "Push").
        resultCode:
          type: integer
          format: int32
          description: Numeric code representing the outcome of the game (e.g., 0 for ongoing, 1 for player win, -1 for player loss, etc.).
          example: 0
        deckCardsHashCode:
          type: integer
          format: int32
          description: A hash code representing the state of the deck at a given point, useful for verifying game integrity.
          example: -336770809
        playerPoints:
          type: integer
          format: int32
          description: The current total points of the player's hand.
          example: 8
        dealerPoints:
          type: integer
          format: int32
          description: The current total points of the dealer's hand.
          example: 0
        totalBet:
          type: number
          format: float
          description: The total amount the player has bet in this game round.
          example: 0.0
        resultBet:
          type: number
          format: float
          description: The net change in the player's balance at the end of the game round (winnings or losses).
          example: 0.0
        playerMoves:
          type: array
          description: A chronological list of moves made by the player in this game.
          items:
            $ref: '#/components/schemas/PlayerMove'
        dealerMoves:
          type: array
          nullable: true
          description: A chronological list of moves made by the dealer in this game. Null until the dealer's turn.
          items:
            $ref: '#/components/schemas/DealerMove' # Assuming a separate schema for dealer moves if needed, or re-use PlayerMove if applicable

    Card:
      type: object
      properties:
        name:
          type: string
          description: The name of the card (e.g., "8 of Diamonds", "King of Spades").
          example: "8 of Diamonds"
        type:
          type: string
          description: The type of card system (e.g., "poker").
          example: "poker"

    PlayerMove:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for this specific move.
          example: 0
        moveType:
          type: string
          description: The type of move made (e.g., 'H' for Hit, 'S' for Stand, 'C' for initial card dealt).
          example: "C"
        cardName:
          type: string
          nullable: true
          description: The name of the card received with this move, if any.
          example: "8 of Diamonds"
        cardPoints:
          type: integer
          format: int32
          nullable: true
          description: The points value of the card received with this move.
          example: 8
        totalPoints:
          type: integer
          format: int32
          description: The player's total points after this move.
          example: 8
        bet:
          type: number
          format: float
          description: The bet amount for this specific move or the initial bet for the round.
          example: 5.0
        deckCardsHashCode:
          type: integer
          format: int32
          description: A hash code representing the state of the deck after this move.
          example: -336770809

    # Assuming DealerMove might be similar to PlayerMove or a simpler version
    DealerMove:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for this specific dealer move.
        moveType:
          type: string
          description: The type of move made by the dealer (e.g., 'H' for Hit, 'S' for Stand).
        cardName:
          type: string
          nullable: true
          description: The name of the card received by the dealer with this move, if any.
        cardPoints:
          type: integer
          format: int32
          nullable: true
          description: The points value of the card received by the dealer with this move.
        totalPoints:
          type: integer
          format: int32
          description: The dealer's total points after this move.
        deckCardsHashCode:
          type: integer
          format: int32
          description: A hash code representing the state of the deck after this move.